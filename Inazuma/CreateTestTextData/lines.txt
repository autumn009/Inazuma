Waltz, bad nymph, for quick jigs vex.
lib jocks quiz nymph to vex dwarf.
Sphinx of black quartz, judge my vow.
How vexingly quick daft zebras jump!
                    if (tempMacroItems.Any(s => s.Id == id)) continue;
                    return id;
                    string id = "m" + i.ToString();
                {
                }
                dst.Add(item.Clone());
                for (int i = 0; ; i++)
                if (next == null) return p as T;
                long diff = y.LastUse.Ticks - x.LastUse.Ticks;
                p = next;
                return ex.ToString(); 
                return Math.Sign(diff);
                return null;
                SortListByDate(tempMacroItems);
                stream.Close();
                tempMacroItems = (List<MacroItem>)ser.Deserialize(stream);
                tempMacroItems = new List<MacroItem>();
                var next = VisualTreeHelper.GetParent(p);
                var stream = new FileStream(fileName(), FileMode.Open);
                XmlSerializer ser = new XmlSerializer(typeof(List<MacroItem>));
            // SORT WITH NEW ITEM FIRST
            //return main.GetMyEditor();
            //var main =  GetMainWindow<MainWindow>(fromObject);
            {
            }
            });
            catch (Exception ex)
            catch( FileNotFoundException)
            copy(mainMacroItems, tempMacroItems);
            copy(tempMacroItems, mainMacroItems);
            Directory.CreateDirectory(path);
            dst.Clear();
            for (; ; )
            foreach (var item in src)
            if (!isDirty) return;
            if (item != null) tempMacroItems.Remove(item);
            isDirty = false;
            isDirty = true;
            list.Sort(delegate (MacroItem x, MacroItem y)
            newmac.CommandLine = "Echo (Re-Write me!)";
            newmac.Id = createNewUniqieId();
            newmac.IsDefaultEncoding = false;
            newmac.LastUse = DateTime.Now;
            newmac.Name = $"New Item";
            ReferBody = template;
            return newmac;
            return Path.Combine(path, "macros.xml");
            ser.Serialize(writer, tempMacroItems);
            string createNewUniqieId()
            tempMacroItems.Insert(0,newmac);
            TextWriter writer = new StreamWriter(fileName());
            try
            var item = tempMacroItems.FirstOrDefault(s => s.Id == id);
            var newmac = new MacroItem();
            var p = fromObject;
            var path = Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),"Pie Dey\\Inazuma");
            writer.Close();
            XmlSerializer ser = new XmlSerializer(typeof(List<MacroItem>));
        //{
        //}
        //public static Editor GetMyEditor(DependencyObject fromObject)
        {
        }
        private static bool isDirty = false;
        private static List<MacroItem> mainMacroItems = new List<MacroItem>();
        private static List<MacroItem> tempMacroItems = new List<MacroItem>();
        private static string fileName()
        private static void copy(List<MacroItem> src, List<MacroItem> dst)
        public bool IsDefaultEncoding;
        public DateTime LastUse;
        public MacroItem Clone() => MemberwiseClone() as MacroItem;
        public MacroItem ReferBody;
        public MacroItemForMain(MacroItem template)
        public override string ToString() => $"{Name} ({Id}): {CommandLine}";
        public override string ToString() => ReferBody.Name;
        public static IEnumerable<MacroItem> EnumMacroEntry() => tempMacroItems;
        public static IEnumerable<MacroItem> EnumMainMacroEntry() => mainMacroItems;
        public static MacroItem AddMacroEntry()
        public static string Load()
        public static T GetMainWindow<T>(DependencyObject fromObject) where T : DependencyObject
        public static void CopyMainToTemp()
        public static void CopyTempToMain()
        public static void RemoveMacroEntry(string id)
        public static void Save()
        public static void SetDirty() => isDirty = true;
        public static void SortListByDate(List<MacroItem> list)
        public string CommandLine;
        public string Id;
        public string Name;
    {
    }
    class Macros
    class WpfUtil
    public class MacroItem
    public class MacroItemForMain
//using Inazuma;
{
}
namespace InazumaWpf
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Text.Json;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media;
using System.Windows;
using System.Xml.Serialization;
using System;
